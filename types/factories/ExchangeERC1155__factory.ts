/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExchangeERC1155,
  ExchangeERC1155Interface,
} from "../ExchangeERC1155";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC1155[]",
        name: "nftAddresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "nftIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "targetIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "exchangeAllERC1155",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "nftToId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "targetContract",
    outputs: [
      {
        internalType: "contract EndersGate",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetId",
        type: "uint256",
      },
    ],
    name: "updateNftsToId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200149c3803806200149c833981810160405281019062000037919062000562565b620000576200004b6200018360201b60201c565b6200018b60201b60201c565b81518351146200009e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000095906200067c565b60405180910390fd5b60005b83518160ff1610156200017957818160ff1681518110620000c757620000c66200069e565b5b602002602001015160016000868460ff1681518110620000ec57620000eb6200069e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858460ff16815181106200014957620001486200069e565b5b60200260200101518152602001908152602001600020819055508080620001709062000709565b915050620000a1565b5050505062000738565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b38262000268565b810181811067ffffffffffffffff82111715620002d557620002d462000279565b5b80604052505050565b6000620002ea6200024f565b9050620002f88282620002a8565b919050565b600067ffffffffffffffff8211156200031b576200031a62000279565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200035e8262000331565b9050919050565b6000620003728262000351565b9050919050565b620003848162000365565b81146200039057600080fd5b50565b600081519050620003a48162000379565b92915050565b6000620003c1620003bb84620002fd565b620002de565b90508083825260208201905060208402830185811115620003e757620003e66200032c565b5b835b81811015620004145780620003ff888262000393565b845260208401935050602081019050620003e9565b5050509392505050565b600082601f83011262000436576200043562000263565b5b815162000448848260208601620003aa565b91505092915050565b600067ffffffffffffffff8211156200046f576200046e62000279565b5b602082029050602081019050919050565b6000819050919050565b620004958162000480565b8114620004a157600080fd5b50565b600081519050620004b5816200048a565b92915050565b6000620004d2620004cc8462000451565b620002de565b90508083825260208201905060208402830185811115620004f857620004f76200032c565b5b835b81811015620005255780620005108882620004a4565b845260208401935050602081019050620004fa565b5050509392505050565b600082601f83011262000547576200054662000263565b5b815162000559848260208601620004bb565b91505092915050565b6000806000606084860312156200057e576200057d62000259565b5b600084015167ffffffffffffffff8111156200059f576200059e6200025e565b5b620005ad868287016200041e565b935050602084015167ffffffffffffffff811115620005d157620005d06200025e565b5b620005df868287016200052f565b925050604084015167ffffffffffffffff8111156200060357620006026200025e565b5b62000611868287016200052f565b9150509250925092565b600082825260208201905092915050565b7f57726f6e6720696e707574000000000000000000000000000000000000000000600082015250565b600062000664600b836200061b565b915062000671826200062c565b602082019050919050565b60006020820190508181036000830152620006978162000655565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b60006200071682620006fc565b915060ff8214156200072d576200072c620006cd565b5b600182019050919050565b610d5480620007486000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063aa00d18e1161005b578063aa00d18e146100ed578063bd90df701461011d578063d34dd1f01461013b578063f2fde38b1461015757610088565b80633992a6a81461008d57806354cea4ed146100a9578063715018a6146100c55780638da5cb5b146100cf575b600080fd5b6100a760048036038101906100a29190610911565b610173565b005b6100c360048036038101906100be9190610951565b610273565b005b6100cd610349565b005b6100d76103d1565b6040516100e491906109b3565b60405180910390f35b61010760048036038101906101029190610911565b6103fa565b60405161011491906109dd565b60405180910390f35b61012561041f565b6040516101329190610a57565b60405180910390f35b61015560048036038101906101509190610911565b610445565b005b610171600480360381019061016c9190610a9e565b6105b6565b005b60008273ffffffffffffffffffffffffffffffffffffffff1662fdd58e33846040518363ffffffff1660e01b81526004016101af929190610acb565b602060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f09190610b09565b90508273ffffffffffffffffffffffffffffffffffffffff1663f242432a333085856040518563ffffffff1660e01b81526004016102319493929190610b6d565b600060405180830381600087803b15801561024b57600080fd5b505af115801561025f573d6000803e3d6000fd5b5050505061026e8383836106ae565b505050565b61027b61079a565b73ffffffffffffffffffffffffffffffffffffffff166102996103d1565b73ffffffffffffffffffffffffffffffffffffffff16146102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610c22565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050565b61035161079a565b73ffffffffffffffffffffffffffffffffffffffff1661036f6103d1565b73ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610c22565b60405180910390fd5b6103cf60006107a2565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001602052816000526040600020602052806000526040600020600091509150505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61044d61079a565b73ffffffffffffffffffffffffffffffffffffffff1661046b6103d1565b73ffffffffffffffffffffffffffffffffffffffff16146104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890610c22565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1662fdd58e30846040518363ffffffff1660e01b81526004016104fd929190610acb565b602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610b09565b90508273ffffffffffffffffffffffffffffffffffffffff1663f242432a303385856040518563ffffffff1660e01b815260040161057f9493929190610b6d565b600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050505050565b6105be61079a565b73ffffffffffffffffffffffffffffffffffffffff166105dc6103d1565b73ffffffffffffffffffffffffffffffffffffffff1614610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062990610c22565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069990610cb4565b60405180910390fd5b6106ab816107a2565b50565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663731133e93383856040518463ffffffff1660e01b815260040161076293929190610cd4565b600060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b5050505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108968261086b565b9050919050565b60006108a88261088b565b9050919050565b6108b88161089d565b81146108c357600080fd5b50565b6000813590506108d5816108af565b92915050565b6000819050919050565b6108ee816108db565b81146108f957600080fd5b50565b60008135905061090b816108e5565b92915050565b6000806040838503121561092857610927610866565b5b6000610936858286016108c6565b9250506020610947858286016108fc565b9150509250929050565b60008060006060848603121561096a57610969610866565b5b6000610978868287016108c6565b9350506020610989868287016108fc565b925050604061099a868287016108fc565b9150509250925092565b6109ad8161088b565b82525050565b60006020820190506109c860008301846109a4565b92915050565b6109d7816108db565b82525050565b60006020820190506109f260008301846109ce565b92915050565b6000819050919050565b6000610a1d610a18610a138461086b565b6109f8565b61086b565b9050919050565b6000610a2f82610a02565b9050919050565b6000610a4182610a24565b9050919050565b610a5181610a36565b82525050565b6000602082019050610a6c6000830184610a48565b92915050565b610a7b8161088b565b8114610a8657600080fd5b50565b600081359050610a9881610a72565b92915050565b600060208284031215610ab457610ab3610866565b5b6000610ac284828501610a89565b91505092915050565b6000604082019050610ae060008301856109a4565b610aed60208301846109ce565b9392505050565b600081519050610b03816108e5565b92915050565b600060208284031215610b1f57610b1e610866565b5b6000610b2d84828501610af4565b91505092915050565b600082825260208201905092915050565b50565b6000610b57600083610b36565b9150610b6282610b47565b600082019050919050565b600060a082019050610b8260008301876109a4565b610b8f60208301866109a4565b610b9c60408301856109ce565b610ba960608301846109ce565b8181036080830152610bba81610b4a565b905095945050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c0c602083610bc5565b9150610c1782610bd6565b602082019050919050565b60006020820190508181036000830152610c3b81610bff565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c9e602683610bc5565b9150610ca982610c42565b604082019050919050565b60006020820190508181036000830152610ccd81610c91565b9050919050565b6000608082019050610ce960008301866109a4565b610cf660208301856109ce565b610d0360408301846109ce565b8181036060830152610d1481610b4a565b905094935050505056fea2646970667358221220f5c10a4e1f2d13943ed482aacefbd342f9b878bf31273d2dae6051c6fcde097264736f6c634300080a0033";

type ExchangeERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeERC1155__factory extends ContractFactory {
  constructor(...args: ExchangeERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    nftAddresses: string[],
    nftIds: BigNumberish[],
    targetIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExchangeERC1155> {
    return super.deploy(
      nftAddresses,
      nftIds,
      targetIds,
      overrides || {}
    ) as Promise<ExchangeERC1155>;
  }
  getDeployTransaction(
    nftAddresses: string[],
    nftIds: BigNumberish[],
    targetIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      nftAddresses,
      nftIds,
      targetIds,
      overrides || {}
    );
  }
  attach(address: string): ExchangeERC1155 {
    return super.attach(address) as ExchangeERC1155;
  }
  connect(signer: Signer): ExchangeERC1155__factory {
    return super.connect(signer) as ExchangeERC1155__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeERC1155Interface {
    return new utils.Interface(_abi) as ExchangeERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeERC1155 {
    return new Contract(address, _abi, signerOrProvider) as ExchangeERC1155;
  }
}
